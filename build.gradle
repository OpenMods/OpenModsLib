buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
              name 'OpenMods Third Party'
              url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
//        classpath 'net.thesilkminer.gradle.translationchecker:TranslationChecker:1.1'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'

// HACK: we want to add those repos to all including projects, but still be available to compile this project directly
rootProject.allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name 'Forge'
            url 'http://files.minecraftforge.net/maven'
        }
//        maven {
//            name 'MinecraftS3'
//            url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
//        }
        maven {
            name "OpenMods"
            url "http://repo.openmods.info/artifactory/openmods"
        }
        maven {
            name "OpenMods Extras"
            url 'http://repo.openmods.info/artifactory/thirdparty'
        }
    }
}

/*
repositories {
    maven {
        name "local"
        url ('file:/' + project.file('repo').getAbsolutePath())
    }
}
*/

configurations {
    shade {
        transitive = false
    }
    compile.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + forge_version

    compile 'net.minecraftforge:eventbus:1.0.0:service'
    compile 'net.minecraftforge:forgespi:1.5.0'

    compile "org.lwjgl:lwjgl:3.2.2"
    compile "org.lwjgl:lwjgl-openal:3.2.2"
    compile "org.lwjgl:lwjgl-opengl:3.2.2"

    compile 'com.mojang:datafixerupper:2.0.24'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.google.guava:guava:21.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'com.mojang:authlib:1.5.25'
    compile 'com.mojang:brigadier:1.0.17'
    compile 'io.netty:netty-all:4.1.25.Final'
    compile 'it.unimi.dsi:fastutil:8.2.1'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.3'
    compile 'org.ow2.asm:asm:7.2'
    compile 'org.ow2.asm:asm-commons:7.2'
    compile 'org.ow2.asm:asm-tree:7.2'

    compile 'java3d:vecmath:1.5.2' // TODO not provider, solve!

    compileOnly 'com.google.errorprone:error_prone_annotations:2.0.15'

    shade group: 'info.openmods', name: 'calc', version: '0.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
}

def String git(String... arguments) {
    def out = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = arguments.toList()
        standardOutput = out
    }
    out.toString().trim()
}

def String gitHash() {
    git 'rev-parse', '--short', 'HEAD'
}

def String gitBranch() {
    git 'rev-parse', '--abbrev-ref', 'HEAD'
}

def env = System.getenv()

version = mc_version + "-" + mod_version

def in_jenkins = false

def jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = in_jenkins ? env.GIT_BRANCH.minus("origin/") : gitBranch()
def hash = gitHash()

if (branch != null && !branch.equals("master")) {
    version += "-" + branch
}

if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

def gitManifest = manifest {
    if (branch != null) {
        attributes("Git-Branch": branch,
                "Git-Hash": hash,
                "Implementation-Version": mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

minecraft {
    mappings channel: 'snapshot', version: mcp_mappings
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                openmods {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            mods {
                openmods {
                    source sourceSets.main
                }
            }
        }
    }
}

def fmlManifest = manifest {
}

if (project.hasProperty('keyStore')) {
    task signJar(type: SignJar, dependsOn: reobfJar) {
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStoreKeyPass

        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }

    build.dependsOn signJar
}

jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:accessibility,html,syntax', true)
    }
}

// task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
//     modId = "openmods"
//     templateFileName = "en_us.lang"
// }

// task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
//     modId = "openmods"
//     dryRun = true
//     templateFileName = "en_us.lang"
// }

task wrapper (type: Wrapper) {
    gradleVersion = "4.10.3"
}

task generateOrientationDetails(type: JavaExec, dependsOn: compileJava) {
   main = "openmods.geometry.OrientationInfoGenerator"
   classpath = sourceSets.main.runtimeClasspath + files(sourceSets.main.output.classesDir)
}
