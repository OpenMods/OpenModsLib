group = rootProject.mod_group
version = "${rootProject.minecraft_version}-${rootProject.mod_version}"
archivesBaseName = rootProject.jar_name

minecraft {
    version = rootProject.minecraft_version + "-" + rootProject.forge_version
    assetDir = "run/assets"

    replaceIn rootProject.mod_class
    replace "@VERSION@", rootProject.mod_version
}

sourceSets {
    main {
        java {
            srcDir "src"
            srcDir "integration/buildcraft/api"
        }
        resources {
            srcDir "assets"
        }
    }
}

processResources {
    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replaces
        expand 'version': rootProject.mod_version
    }

    // copy everything else, thats we didnt do before
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// BEYOND THIS POINT.. 
// IS STUFF THATS FOR RELEASING...

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore stuff
    ext.keystore_location = "."

if (!project.hasProperty("keystore_alias")) // keystore stuff
    ext.keystore_alias = ""

if (!project.hasProperty("keystore_password")) // keystore stuff
    ext.keystore_password = ""

if (!project.hasProperty("release_loc")) // release loc
    ext.release_loc = "."
else
    ext.release_loc = release_loc.replace('{MC}', minecraft.version).replace('{MODVER}', rootProject.mod_version).replace('{BUILD}', "${System.getenv().BUILD_NUMBER}")

task signJar(dependsOn: "reobf") {
    inputs.file jar.getArchivePath()
    inputs.file keystore_location
    inputs.property "keystore_alias", keystore_alias
    inputs.property "keystore_password", keystore_password
    outputs.file jar.getArchivePath()

    // only sign if the keystore exists
    onlyIf {
        return keystore_location != "."
    }

    // the actual action.. sign the jar.
    doLast {
        ant.signjar(
                destDir: jar.destinationDir,
                jar: jar.getArchivePath(),
                keystore: keystore_location,
                alias: keystore_alias,
                storepass: keystore_password
        )
    }
}

task release(type: Copy) {
    dependsOn "signJar"

    from project.tasks.jar.destinationDir
    into project.file(project.release_loc)

    eachFile { file ->
        logger.info "copying ${file}"
    }

    // only if the release location isn't empty.
    onlyIf {
        return project.release_loc != "."
    }
}
